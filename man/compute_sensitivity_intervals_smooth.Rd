% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_sensitivity_intervals_smooth.R
\name{compute_sensitivity_intervals_smooth}
\alias{compute_sensitivity_intervals_smooth}
\title{Compute Sensitivity Intervals Using Smoothness Restrictions}
\usage{
compute_sensitivity_intervals_smooth(
  betahat,
  ci_lower,
  ci_upper,
  numPrePeriods,
  numPostPeriods,
  method = "constant",
  rho_values = c(0, 0.3, 0.5, 0.8),
  decay_types = c("exponential", "linear"),
  lambda_values = c(0.1, 0.2, 0.5, 1),
  ci_level = 0.95,
  Mvec = 0.02,
  scale = TRUE,
  benchmark_aggregator = c("none", "smallest", "largest", "median"),
  ...
)
}
\arguments{
\item{betahat}{Numeric vector of effect size estimates.}

\item{ci_lower}{Numeric vector of lower bounds of confidence intervals.}

\item{ci_upper}{Numeric vector of upper bounds of confidence intervals.}

\item{numPrePeriods}{Integer indicating the number of pre-treatment periods.}

\item{numPostPeriods}{Integer indicating the number of post-treatment periods.}

\item{method}{Character string specifying the method to use: "constant", "decay", or "all". Defaults to "constant".}

\item{rho_values}{Numeric vector of rho values to use for the "constant" method. Defaults to \code{c(0, 0.3, 0.5, 0.8)}.}

\item{decay_types}{Character vector specifying decay types for the "decay" method. Defaults to \code{c("exponential", "linear")}.}

\item{lambda_values}{Numeric vector of lambda values to use for the "decay" method. Defaults to \code{c(0.1, 0.2, 0.5, 1)}.}

\item{ci_level}{Numeric value specifying the confidence level. Defaults to \code{0.95}.}

\item{Mvec}{Numeric vector of smoothness parameters for smoothness restrictions. Defaults to \code{0.02}.}

\item{scale}{Logical flag indicating whether to apply scaling to \code{betahat},
\code{sigma}, and \code{Mvec} to help with numerical stability (default \code{TRUE}).}

\item{benchmark_aggregator}{Character in \code{c("none","smallest","largest","median")}.
When not "none", this triggers a call to \code{compute_bound()} to obtain an \emph{upper}
benchmark bound. The resulting numeric is multiplied into \code{Mvec} before passing to
\code{createSensitivityResults()}. Defaults to \code{"none"}.}

\item{...}{Additional arguments passed to \code{HonestDiD::createSensitivityResults}
(e.g. \code{alpha} or \code{l_vec}).}
}
\value{
A list containing:
\describe{
\item{\code{widest_interval}}{The interval with the widest width.}
\item{\code{narrowest_interval}}{The interval with the narrowest width.}
\item{\code{all_intervals}}{A data frame containing all computed intervals.}
}
}
\description{
This function computes sensitivity intervals over different covariance structures using smoothness restrictions, leveraging the \code{HonestDiD} package.
}
